// Mocks generated by Mockito 5.4.4 from annotations
// in weather/test/utils/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather/services/google_places/data.dart' as _i4;
import 'package:weather/services/google_places/google_places.dart' as _i8;
import 'package:weather/services/open_mateo/data.dart' as _i7;
import 'package:weather/services/open_mateo/open_mateo.dart' as _i5;
import 'package:weather/services/open_mateo/open_mateo_url.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOpenMateoUrlBuilder_1 extends _i1.SmartFake
    implements _i3.OpenMateoUrlBuilder {
  _FakeOpenMateoUrlBuilder_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimeZoneResponse_2 extends _i1.SmartFake
    implements _i4.TimeZoneResponse {
  _FakeTimeZoneResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OpenMateoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenMateoService extends _i1.Mock implements _i5.OpenMateoService {
  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  _i3.OpenMateoUrlBuilder get openMateoUrlBuilder => (super.noSuchMethod(
        Invocation.getter(#openMateoUrlBuilder),
        returnValue: _FakeOpenMateoUrlBuilder_1(
          this,
          Invocation.getter(#openMateoUrlBuilder),
        ),
        returnValueForMissingStub: _FakeOpenMateoUrlBuilder_1(
          this,
          Invocation.getter(#openMateoUrlBuilder),
        ),
      ) as _i3.OpenMateoUrlBuilder);

  @override
  _i6.Future<Map<String, _i7.HourlyData>> fetchHourly({
    required double? latitude,
    required double? longitude,
    required String? timezone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchHourly,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
            #timezone: timezone,
          },
        ),
        returnValue: _i6.Future<Map<String, _i7.HourlyData>>.value(
            <String, _i7.HourlyData>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, _i7.HourlyData>>.value(
                <String, _i7.HourlyData>{}),
      ) as _i6.Future<Map<String, _i7.HourlyData>>);

  @override
  _i6.Future<Map<String, _i7.DailyData>> fetchDaily({
    required double? latitude,
    required double? longitude,
    required String? timezone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDaily,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
            #timezone: timezone,
          },
        ),
        returnValue: _i6.Future<Map<String, _i7.DailyData>>.value(
            <String, _i7.DailyData>{}),
        returnValueForMissingStub: _i6.Future<Map<String, _i7.DailyData>>.value(
            <String, _i7.DailyData>{}),
      ) as _i6.Future<Map<String, _i7.DailyData>>);

  @override
  _i6.Future<_i7.CurrentWeather?> fetchWeatherAtLocation({
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeatherAtLocation,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i6.Future<_i7.CurrentWeather?>.value(),
        returnValueForMissingStub: _i6.Future<_i7.CurrentWeather?>.value(),
      ) as _i6.Future<_i7.CurrentWeather?>);
}

/// A class which mocks [GooglePlacesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGooglePlacesService extends _i1.Mock
    implements _i8.GooglePlacesService {
  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  _i6.Future<List<_i4.Place>> fetchNearbyLocalities(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNearbyLocalities,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i6.Future<List<_i4.Place>>.value(<_i4.Place>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i4.Place>>.value(<_i4.Place>[]),
      ) as _i6.Future<List<_i4.Place>>);

  @override
  _i6.Future<_i4.TimeZoneResponse> fetchTimeZone(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTimeZone,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue:
            _i6.Future<_i4.TimeZoneResponse>.value(_FakeTimeZoneResponse_2(
          this,
          Invocation.method(
            #fetchTimeZone,
            [
              latitude,
              longitude,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.TimeZoneResponse>.value(_FakeTimeZoneResponse_2(
          this,
          Invocation.method(
            #fetchTimeZone,
            [
              latitude,
              longitude,
            ],
          ),
        )),
      ) as _i6.Future<_i4.TimeZoneResponse>);
}
